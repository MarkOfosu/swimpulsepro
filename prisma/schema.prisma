generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  coach         Coach?
  swimmer       Swimmer?
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Team {
  id          String    @id @default(cuid())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  coaches     Coach[]
  swimmers    Swimmer[]
  swimGroups  SwimGroup[]
}

model Coach {
  id         String    @id @default(cuid())
  userId     String    @unique
  teamId     String
  isAdmin    Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])
  team       Team      @relation(fields: [teamId], references: [id])
  swimGroups SwimGroup[]
}

model Swimmer {
  id         String    @id @default(cuid())
  userId     String    @unique
  teamId     String
  groupId    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])
  team       Team      @relation(fields: [teamId], references: [id])
  swimGroup  SwimGroup @relation(fields: [groupId], references: [id])
}

model SwimGroup {
  id         String    @id @default(cuid())
  coachId    String
  teamId     String
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  coach      Coach     @relation(fields: [coachId], references: [id])
  team       Team      @relation(fields: [teamId], references: [id])
  swimmers   Swimmer[]
}
